class Latency:
    def __init__(self, image_sequence_number, raw_buffer_size, raw_buffer_timestamp):
        # # Tracks the sequence number of the image generated by the camera
        self.image_seq_num = image_sequence_number
        
        # data of raw (not encoded) image from camera
        self.raw_buf_s = raw_buffer_size
        self.raw_buf_ts = raw_buffer_timestamp

        # data of encoded (H264) image from camera, will be set later
        self.enc_buf_s = 0
        self.enc_buf_ts = 0

        # timestamp of acknowledgement reception, will be set later
        self.ack_ts = 0

        # latency of server decoding and signal processing
        self.server_proc_lat = 0

    def compression(self) -> float:
        return self.raw_buf_s / self.enc_buf_s
    
    def encoding_lat_ms(self):
        return 1000*(self.enc_buf_ts - self.raw_buf_ts)
    
    def network_lat_ms(self):
        return 1000*(self.ack_ts - self.enc_buf_ts)
    
    def full_lat_ms(self):
        return 1000*(self.ack_ts - self.raw_buf_ts)
    
    def __str__(self):
        return f"encoded_size:\t{self.enc_buf_s} bytes,enc_ts:{self.enc_buf_ts}\nAck_ts:\t\t{self.ack_ts:.3f} ms\nSeq_num:\t{self.image_seq_num}\nCompression:\t{self.compression():.0f}\nH264_latency:\t{self.encoding_lat_ms():.3f} ms\nServer_lat:\t{self.server_proc_lat:.3f} ms\nRTT:\t\t{self.network_lat_ms():.3f} ms\nFull_latency:\t{self.full_lat_ms():.3f} ms"