class FrameLatency:
    def __init__(self, image_sequence_number, raw_buffer_size, raw_buffer_timestamp):
        # indicats if FrameLatency is complete, sometimes frames get lost, then it is not complete
        self.complete = False
        
        # Tracks the sequence number of the image generated by the camera
        self.image_seq_num = image_sequence_number
        
        # data of raw (not encoded) image from camera
        self.raw_buf_s = raw_buffer_size
        self.raw_buf_ts = raw_buffer_timestamp

        # data of encoded (H264) image from camera, will be set later
        self.enc_buf_s = 0
        self.enc_buf_ts = 0

        # timestamp of acknowledgement reception, will be set later
        self.ack_ts = 0
        self.ack_enc_s = 0

        # latency of server decoding and signal processing
        self.server_proc_lat_ms = 0
        self.server_dec_lat_ms = 0

    def compression(self) -> float:
        return self.raw_buf_s / self.enc_buf_s

    def encoding_lat_ms(self):
        return 1000*(self.enc_buf_ts - self.raw_buf_ts)

    def network_lat_ms(self):
        return 1000*(self.ack_ts - self.enc_buf_ts) - self.server_proc_lat_ms - self.server_dec_lat_ms

    def full_lat_ms(self):
        return 1000*(self.ack_ts - self.raw_buf_ts)

    def __str__(self):
        return (
            f"Seq_num:\t\t{self.image_seq_num}\n"
            f"raw_ts:\t\t\t{self.raw_buf_ts:.6f}\n"
            f"enc_ts:\t\t\t{self.enc_buf_ts:.6f}\n"
            f"Ack_ts:\t\t\t{self.ack_ts:.6f}\n"
            f"Compression:\t\t{self.compression():.0f}\n"
            f"raw_size:\t\t{self.raw_buf_s} bytes\n"
            f"encoded_size:\t\t{self.enc_buf_s} bytes\n"
            f"ack_buf_size:\t\t{self.ack_enc_s} bytes\n"
            f"Encoding:\t\t{self.encoding_lat_ms():.3f} ms\n"
            f"Decoding:\t\t{self.server_dec_lat_ms:.3f} ms\n"
            f"Server_proc:\t\t{self.server_proc_lat_ms:.3f} ms\n"
            f"Network_RTT:\t\t{self.network_lat_ms():.3f} ms\n"
            f"Full_RTT:\t\t{self.full_lat_ms():.3f} ms"
        )